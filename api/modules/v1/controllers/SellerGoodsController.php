<?php

namespace api\modules\v1\controllers;

use api\base\controllers\Auth;
use common\models\Attr;
use common\models\Goods;
use common\models\GoodsClass;
use common\models\Store;
use common\models\StoreClass;
use jinxing\admin\helpers\Helper;
use yii\data\ActiveDataProvider;
use yii\data\Pagination;
use yii\web\Request;
use Yii;

/**
 * 店铺商品控制器
 * Class SellerStoreController
 */
class SellerGoodsController extends Auth
{
    /**
     * 指定ORM模型
     * @var string
     */
    public $modelClass = 'common\models\Goods';

    public $serializer = [
        'class' => 'yii\rest\Serializer',
        'collectionEnvelope' => 'items',
    ];

    /**
     * @var null 店铺ID
     */
    public $store_id = null;

    public function beforeAction($action)
    {
        $this->allowedApis = [];
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * 设置SEO
     * @return array
     */
    public function actionSeo()
    {
        return $this->success([
            'seo_title'     => Yii::$app->params['site']['WEB_TITLE'],
            'seo_keywords'  => Yii::$app->params['site']['WEB_KEYWORDS'],
            'seo_desc'      => Yii::$app->params['site']['WEB_DESCRIPTION'],
        ]);
    }

    public function actionIndex()
    {
        return new ActiveDataProvider([
            'query'      => Goods::find(),
            'pagination' => new Pagination(['pageSize' => 50])
        ]);
    }

    public function actionCreate()
    {
        $request = Yii::$app->request;
        $model   = new $this->modelClass;
        $model->attributes = $this->_getPost($request);
        if ($model->save()) {
            return $this->success();
        }
        return $this->error(Helper::arrayToString($model->getErrors()));
    }

    public function actionUpdate()
    {
        $request = Yii::$app->request;
        $model   = StoreClass::findOne(['id' => $request->post('id', 0)]);
        $model->attributes = $this->_getPost($request);
        if ($model->save()) {
            return $this->success();
        }
        return $this->error(Helper::arrayToString($model->getErrors()));
    }

    public function actionDelete()
    {
        $request    = Yii::$app->request;
        $ids        = $request->post('ids', '');
        $store_id   = $request->post('store_id', '');

        if (strpos($ids, ',') !== false) {
            $ids = implode(',', $ids);
        } else {
            $ids = array((int)$ids);
        }

        foreach ($ids as $item) {
            $store_class_one = StoreClass::findOne(['id' => $item, 'store_id' => $store_id]);
            if (is_null($store_class_one)) return $this->error('店铺分类名称id不存在');

            $child_class_all = StoreClass::findOne(['pid' => $item]);
            if (!is_null($child_class_all)) return $this->error('有子级分类不能删除');
        }

        StoreClass::deleteAll(['id' => $ids, 'store_id' => $store_id]);

        return $this->success();
    }

    private function _getPost(Request $request)
    {
        return [
            'name'              => $request->post('name', ''),
            'title'             => $request->post('title', ''),
            'keywords'          => $request->post('keywords', ''),
            'desc'              => $request->post('desc', ''),
            'is_nav'            => $request->post('is_nav', 1),
            'status'            => $request->post('status', 1),
            'sort'              => $request->post('sort', 1),
            'pid'               => $request->post('pid', 0),
            'store_id'          => $this->_getStoreID(),
            'create_user_id'    => Yii::$app->user->id,
        ];
    }

    /**
     * 获取店铺ID
     * @return array
     */
    private function _getStoreID()
    {
        return Store::find()->select('id')->where(['user_id' => Yii::$app->user->id])->column()[0];
    }

    /**
     * 获取店铺分类
     */
    public function getChildsByStoreClass()
    {
        $class_id = Yii::$app->request->post('class_id', 1);
        $store_class = StoreClass::getDataList(['pid' => $class_id,'status' => StoreClass::STATUS_OPEN]);
        if (!$store_class) return $this->error('暂无数据');
        return $this->success($store_class);
    }

    /**
     * 获取商品子级分类
     */
    public function actionGetChildsByGoodsClass()
    {
        $class_id = Yii::$app->request->post('class_id', 1);
        $children = GoodsClass::findOne(['id' => $class_id]);
        if (is_null($children)) return $this->error('暂无数据');
        $goods_class = GoodsClass::getClassById($class_id);
        $attrs = Attr::getAttrs($children->type_id);
        if (!empty($attrs)) {
            foreach ($attrs as $k => $item) {
                if (!empty($attrs[$k]['value'])) {
                    $attrs[$k]['value'] = explode(",", $attrs[$k]['value']);
                } else {
                    $attrs[$k]['value'] = array();
                }
                $arr[$attrs[$k]['style']][] = $attrs[$k];
            }
            $attrs = $arr;
        }
        //组装返回的数据
        $goods_attr_data = isset($attrs[0]) ? $attrs[0] : array();
        $goods_spec_data = isset($attrs[1]) ? $attrs[1] : array();

        return $this->success([
            'status' => 1,
            'class' =>$goods_class,
            'attrs' =>$goods_attr_data,
            'specs' =>$goods_spec_data,
        ]);
    }
}
